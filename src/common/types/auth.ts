// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'auth';

export interface SignUpRequest {
  fullName: string;
  email: string;
  phoneNumber: string;
  password: string;
  role: string;
}

export interface AuthResponse {
  accessToken: string;
  refreshToken: string;
  /** optional embedded or imported */
  user: User | undefined;
}

export interface User {
  userId: string;
  fullName: string;
  email: string;
  phoneNumber: string;
  role: string;
  isVerified: string;
  createdAt: string;
  updatedAt: string
}

export interface SignInRequest {
  email: string;
  password: string;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface VerifyTokenRequest {
  token: string;
}

export interface VerifyTokenResponse {
  isValid: boolean;
}

export interface LogoutRequest {
  refreshToken: string;
  userId: string;
}

export interface LogoutResponse {
  success: boolean;
}

export interface ChangePasswordRequest {
  userId: string;
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordResponse {
  success: boolean;
  message: string;
}

export interface ForgotPasswordRequest {
  email: string;
}

export interface ForgotPasswordResponse {
  success: boolean;
  message: string;
}

export const AUTH_PACKAGE_NAME = 'auth';

export interface AuthServiceClient {
  signUp(request: SignUpRequest): Observable<AuthResponse>;

  signIn(request: SignInRequest): Observable<AuthResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<AuthResponse>;

  verifyToken(request: VerifyTokenRequest): Observable<VerifyTokenResponse>;

  logout(request: LogoutRequest): Observable<LogoutResponse>;

  changePassword(
    request: ChangePasswordRequest,
  ): Observable<ChangePasswordResponse>;

  forgotPassword(
    request: ForgotPasswordRequest,
  ): Observable<ForgotPasswordResponse>;
}

export interface AuthServiceController {
  signUp(
    request: SignUpRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  signIn(
    request: SignInRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  verifyToken(
    request: VerifyTokenRequest,
  ):
    | Promise<VerifyTokenResponse>
    | Observable<VerifyTokenResponse>
    | VerifyTokenResponse;

  logout(
    request: LogoutRequest,
  ): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  changePassword(
    request: ChangePasswordRequest,
  ):
    | Promise<ChangePasswordResponse>
    | Observable<ChangePasswordResponse>
    | ChangePasswordResponse;

  forgotPassword(
    request: ForgotPasswordRequest,
  ):
    | Promise<ForgotPasswordResponse>
    | Observable<ForgotPasswordResponse>
    | ForgotPasswordResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'signUp',
      'signIn',
      'refreshToken',
      'verifyToken',
      'logout',
      'changePassword',
      'forgotPassword',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';
